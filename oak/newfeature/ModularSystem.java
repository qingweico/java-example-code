package oak.newfeature;

/**
 * -------------------- 模块系统 --------------------
 * Java 平台模块系统(Java Platform Module System,JPMS) @since JDK9
 * Java 平台模块系统(从萌芽到诞生,花费了十多年的时间),可以说是自 Java 诞生
 * 以来最重要的新软件工程技术,模块化可以帮助各级开发人员在构建,维护和演进软件
 * 系统时提高工作效率;
 * ********** Java模块系统出现的背景 **********
 * Java 语言访问修饰符(private,protected,public,缺省)的控制区域遗漏了Java 包之间的关系;
 * 在 JDK 8 及以前的版本里,一个对象在两个包之间的访问控制,要么是全封闭的,要么是全开放的;
 * 换句话说,JDK 9 之前的 Java语言没有描述和定义包之间的依赖关系,也没有描述和定义基于包的
 * 依赖关系的访问控制规则,这是一个缺失的访问控制;
 * 之前一个接口是公开接口,还是内部接口是依靠 Java 接口的使用规范这样的纪律性合约,而不是依靠编译器强制性的检查;
 * Java 语言没有描述和定义包之间的依赖关系,还直接影响了 Java应用程序的启动效率;影响 Java 应用启动速度的最主要原因,就是
 * 类的加载;导致类加载缓慢的一个重要原因,就是很难查找到要加载的类的实现代码[使用 Jar 文件来分发和部署 Java 应用],由于 Jar
 * 文件里没有描述类的依赖关系的内容,Java 的类加载器只能线性地搜索 class path下的 Jar 文件,直到发现了给定的类和方法;这
 * 种线性搜索方法当然不是高效的;class path 下的 Jar 文件越多,类加载得就越慢;此外还会有影子类(Shadowing classes)和版本
 * 冲突等副作用;
 *
 * @author zqw
 * @date 2023/1/1
 */
class ModularSystem {
    public static void main(String[] args) {

    }
}
